{"version":3,"sources":["base/colours.ts","components/Game/styles.ts","components/Button/styles.ts","components/Button/index.tsx","components/Card/styles.ts","components/Card/index.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["WHITE","Game","styled","div","GameContainer","GameTitle","h1","GameGrid","Button","button","text","onClick","Card","CardFrontImage","img","CardBackImage","id","src","alt","handleChoice","cardObject","cardImages","useState","cards","setCards","setTurns","choiceOne","setChoiceOne","setChoiceTwo","card","shuffledCards","sort","Math","random","map","App","GlobalStyles","createGlobalStyle","normalize","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNACaA,EAAQ,UCERC,EAAOC,UAAOC,IAAV,sEDDK,WCMTC,EAAgBF,UAAOC,IAAV,gIAQbE,EAAYH,UAAOI,GAAV,sFACXN,GAKEO,EAAWL,UAAOC,IAAV,iICnBRK,EAASN,UAAOO,OAAV,4PAIGT,EACXA,EAKaA,EFbH,W,OGQN,SAASQ,EAAT,GAAiD,IAA/BE,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,QACrC,OACE,cAAC,EAAD,CAAeA,QAASA,EAAxB,SACGD,ICRA,IAAME,EAAOV,UAAOC,IAAV,mDAIJU,EAAiBX,UAAOY,IAAV,+GAGLd,GAITe,EAAgBb,UAAOY,IAAV,+GAGJd,GCPP,SAASY,EAAT,GAA0D,IAA1CI,EAAyC,EAAzCA,GAAIC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,aACrCC,EAAa,CAAEH,MAAKD,MAM1B,OACE,cAAC,EAAD,UACE,gCACE,cAAC,EAAD,CAAuBC,IAAKA,EAAKC,IAAKA,IACtC,cAAC,EAAD,CACED,IAAI,gBACJC,IAAI,cACJP,QAXY,WAClBQ,EAAaC,WCTjB,I,EAAMC,EAAa,CACjB,CAAE,IAAO,iBAAkB,IAAO,UAClC,CAAE,IAAO,mBAAoB,IAAO,YACpC,CAAE,IAAO,gBAAiB,IAAO,SACjC,CAAE,IAAO,eAAgB,IAAO,QAChC,CAAE,IAAO,gBAAiB,IAAO,SACjC,CAAE,IAAO,iBAAkB,IAAO,WAGrB,SAASpB,IACtB,MAA0BqB,mBAAsB,IAAhD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAcG,GAAd,WACA,EAAkCH,mBAA2B,MAA7D,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,mBAA2B,MAA7D,mBAAkBM,GAAlB,WAuBMT,EAAe,SAACU,GACpBH,EAAYE,EAAaC,GAAQF,EAAaE,IAShD,OACE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,2BACA,cAAC,EAAD,CAAQnB,KAAK,WAAWC,QAvBT,WACnB,IAAMmB,EAAgB,UAAIT,EAAeA,GACtCU,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAACL,GAAD,mBAAC,eAAeA,GAAhB,IAAsBb,GAAIgB,KAAKC,cAEpCT,EAASM,GACTL,EAAS,MAkBP,cAAC,EAAD,UACGF,EAAMW,KAAI,SAAAL,GAAI,OACb,cAAC,EAAD,CAEEb,GAAIa,EAAKb,GACTC,IAAKY,EAAKZ,IACVC,IAAKW,EAAKX,IACVC,aAAcA,GAJTU,EAAKb,cCvDT,SAASmB,IACtB,IAAMC,EAAeC,4BAAH,2MAEdC,aAYJ,OACE,qCACE,cAACF,EAAD,IACA,cAAC,EAAD,IACA,sBACEG,KAAK,+DACLC,IAAI,kBCrBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACR,EAAD,MAEFS,SAASC,eAAe,W","file":"static/js/main.c38878de.chunk.js","sourcesContent":["export const BLACK = '#000000'\nexport const WHITE = '#FFFFFF'\nexport const PURPLE = '#1B1523'","import styled from 'styled-components'\nimport { PURPLE, WHITE } from '../../base/colours'\n\nexport const Game = styled.div`\n  background-color: ${PURPLE};\n  height: 100%;\n`\n\nexport const GameContainer = styled.div`\n  max-width: 860px;\n  height: 100%;\n  padding: 40px 0;\n  margin: 0 auto;\n  text-align: center;\n`\n\nexport const GameTitle = styled.h1`\n  color: ${WHITE};\n  font-size: 40px;\n  margin-bottom: 40px;\n`\n\nexport const GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-gap: 40px;\n  margin-top: 40px;\n`\n","import styled from 'styled-components'\nimport { WHITE, BLACK } from '../../base/colours'\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  background-color: transparent;\n  border: none;\n  border: 1px solid ${WHITE};\n  color: ${WHITE};\n  cursor: pointer;\n  transition: all 0.3s;\n\n  &:hover {\n    background-color: ${WHITE};\n    color: ${BLACK};\n  }\n`\n","import React from 'react'\nimport * as Styles from './styles'\n\nexport interface ButtonProps {\n  text: string\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nexport default function Button({ text, onClick }: ButtonProps) {\n  return (\n    <Styles.Button onClick={onClick}>\n      {text}\n    </Styles.Button>\n  )\n}\n","import styled from 'styled-components'\nimport { WHITE } from '../../base/colours'\n\nexport const Card = styled.div`\n  position: relative;\n`\n\nexport const CardFrontImage = styled.img`\n  width: 100%;\n  display: block;\n  border: 2px solid ${WHITE};\n  border-radius: 6px;\n`\n\nexport const CardBackImage = styled.img`\n  width: 100%;\n  display: block;\n  border: 2px solid ${WHITE};\n  border-radius: 6px;\n`\n","import React from 'react'\nimport * as Styles from './styles'\n\nexport interface cardProps {\n  id?: number,\n  src: string,\n  alt: string,\n  handleChoice?: any\n}\n\nexport default function Card({ id, src, alt, handleChoice }: cardProps) {\n  const cardObject = { src, id }\n\n  const handleClick = () => {\n    handleChoice(cardObject)\n  }\n\n  return (\n    <Styles.Card>\n      <div>\n        <Styles.CardFrontImage src={src} alt={alt}  />\n        <Styles.CardBackImage \n          src='img/cover.jpg' \n          alt='Cover image'\n          onClick={handleClick} />\n      </div>\n    </Styles.Card>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport * as Styles from './styles'\nimport Button from '../Button/index'\nimport Card, { cardProps } from '../Card/index'\n\nconst cardImages = [\n  { \"src\": \"img/london.jpg\", \"alt\": \"London\"},\n  { \"src\": \"img/new-york.jpg\", \"alt\": \"New York\"},\n  { \"src\": \"img/paris.jpg\", \"alt\": \"Paris\"},\n  { \"src\": \"img/rome.jpg\", \"alt\": \"Rome\"},\n  { \"src\": \"img/seoul.jpg\", \"alt\": \"Seoul\"},\n  { \"src\": \"img/sydney.jpg\", \"alt\": \"Sydney\"}\n]\n\nexport default function Game() { \n  const [cards, setCards] = useState<cardProps[]>([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState<cardProps | null>(null)\n  const [choiceTwo, setChoiceTwo] = useState<cardProps | null>(null)\n\n  // useEffect(() => {\n  //   if (choiceOne && choiceTwo) {\n  //     if (choiceOne.src === choiceTwo.src) {\n  //       console.log(\"Cards match\")\n  //       resetTurn()\n  //     } else {\n  //       console.log(\"Cards don't match\")\n  //       resetTurn()\n  //     }\n  //   }\n  // },[choiceOne, choiceTwo])\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n      setCards(shuffledCards)\n      setTurns(0)\n  }\n\n  const handleChoice = (card: cardProps) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(previousTurns => previousTurns + 1)\n  }\n\n  return (\n    <Styles.Game>\n      <Styles.GameContainer>\n        <Styles.GameTitle>Memory Games</Styles.GameTitle>\n        <Button text='New Game' onClick={shuffleCards} />\n        <Styles.GameGrid>\n          {cards.map(card => (\n            <Card \n              key={card.id} \n              id={card.id}\n              src={card.src} \n              alt={card.alt}\n              handleChoice={handleChoice}\n            />\n          ))}\n        </Styles.GameGrid>\n      </Styles.GameContainer>\n    </Styles.Game>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\nimport { normalize } from 'styled-normalize'\nimport Game from './components/Game'\n\nexport default function App() {\n  const GlobalStyles = createGlobalStyle\n  `\n    ${normalize}\n    * {\n      font-family: 'Poppins', sans-serif;\n      box-sizing: border-box;\n    }\n\n    html, body, #root {\n      height: 100%;\n      width: 100%;\n    }\n  `\n\n  return (\n    <>\n      <GlobalStyles />\n      <Game />\n      <link\n        href='https://fonts.googleapis.com/css?family=Poppins&display=swap'\n        rel='stylesheet'\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}