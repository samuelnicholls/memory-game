{"version":3,"sources":["base/colours.ts","components/Game/styles.ts","components/Button/styles.ts","components/Button/index.tsx","components/Card/styles.ts","components/Card/index.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["WHITE","Game","styled","div","GameContainer","GameTitle","h1","GameGrid","Button","button","text","onClick","Card","CardFrontImage","img","props","isFlipped","CardBackImage","id","src","alt","handleChoice","cardObject","cardImages","useState","cards","setCards","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","useEffect","previousCards","map","card","matched","resetTurn","setTimeout","previousTurns","shuffledCards","sort","Math","random","App","GlobalStyles","createGlobalStyle","normalize","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0b88e66.chunk.js","sourcesContent":["export const BLACK = '#000000'\nexport const WHITE = '#FFFFFF'\nexport const PURPLE = '#1B1523'","import styled from 'styled-components'\nimport { PURPLE, WHITE } from '../../base/colours'\n\nexport const Game = styled.div`\n  background-color: ${PURPLE};\n  min-height: 100vh;\n`\n\nexport const GameContainer = styled.div`\n  max-width: 1024px;\n  height: 100%;\n  padding: 40px 0;\n  margin: 0 auto;\n  text-align: center;\n`\n\nexport const GameTitle = styled.h1`\n  color: ${WHITE};\n  font-size: 40px;\n  margin-bottom: 40px;\n`\n\nexport const GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 40px;\n  padding: 40px;\n  margin-top: 40px;\n`\n","import styled from 'styled-components'\nimport { WHITE, BLACK } from '../../base/colours'\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  background-color: transparent;\n  border: none;\n  border: 1px solid ${WHITE};\n  color: ${WHITE};\n  cursor: pointer;\n  transition: all 0.3s;\n\n  &:hover {\n    background-color: ${WHITE};\n    color: ${BLACK};\n  }\n`\n","import React from 'react'\nimport * as Styles from './styles'\n\nexport interface ButtonProps {\n  text: string\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nexport default function Button({ text, onClick }: ButtonProps) {\n  return (\n    <Styles.Button onClick={onClick}>\n      {text}\n    </Styles.Button>\n  )\n}\n","import styled from 'styled-components'\nimport { WHITE } from '../../base/colours'\n\nexport const Card = styled.div`\n  position: relative;\n`\n\nexport const CardFrontImage = styled.img<{isFlipped: boolean | undefined}>`\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  border: 2px solid ${WHITE};\n  border-radius: 6px;\n  transform: ${props => props.isFlipped ? 'rotateY(0deg)' : 'rotateY(90deg)'};\n`\n\nexport const CardBackImage = styled.img`\n  display: block;\n  width: 100%;\n  border: 2px solid ${WHITE};\n  border-radius: 6px;\n`\n","import * as Styles from './styles'\n\nexport interface cardProps {\n  id?: number,\n  src: string,\n  alt: string,\n  handleChoice?: any,\n  matched?: boolean\n  isFlipped?: boolean\n}\n\nexport default function Card({ id, src, alt, handleChoice, isFlipped }: cardProps) {\n  const cardObject = { src, id }\n\n  const handleClick = () => {\n    handleChoice(cardObject)\n  }\n\n  return (\n    <Styles.Card>\n      <div>\n        <Styles.CardFrontImage src={src} alt={alt} isFlipped={isFlipped} />\n        <Styles.CardBackImage \n          src='img/cover.jpg' \n          alt='Cover image'\n          onClick={handleClick} />\n      </div>\n    </Styles.Card>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport * as Styles from './styles'\nimport Button from '../Button/index'\nimport Card, { cardProps } from '../Card/index'\n\nconst cardImages = [\n  { \"src\": \"img/london.jpg\", \"alt\": \"London\", \"matched\": false},\n  { \"src\": \"img/new-york.jpg\", \"alt\": \"New York\", \"matched\": false},\n  { \"src\": \"img/paris.jpg\", \"alt\": \"Paris\", \"matched\": false},\n  { \"src\": \"img/rome.jpg\", \"alt\": \"Rome\", \"matched\": false},\n  { \"src\": \"img/seoul.jpg\", \"alt\": \"Seoul\", \"matched\": false},\n  { \"src\": \"img/sydney.jpg\", \"alt\": \"Sydney\", \"matched\": false}\n]\n\nexport default function Game() { \n  const [cards, setCards] = useState<cardProps[]>([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState<cardProps | null>(null)\n  const [choiceTwo, setChoiceTwo] = useState<cardProps | null>(null)\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(previousCards => {\n          return previousCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {...card, matched: true}\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  },[choiceOne, choiceTwo])\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n      setCards(shuffledCards)\n      setTurns(0)\n  }\n\n  const handleChoice = (card: cardProps) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(previousTurns => previousTurns + 1)\n  }\n\n  return (\n    <Styles.Game>\n      <Styles.GameContainer>\n        <Styles.GameTitle>Memory Game</Styles.GameTitle>\n        <Button text='New Game' onClick={shuffleCards} />\n        <Styles.GameGrid>\n          {cards.map(card => (\n            <Card \n              key={card.id} \n              id={card.id}\n              src={card.src} \n              alt={card.alt}\n              handleChoice={handleChoice}\n              isFlipped={card.id === choiceOne?.id || card.id === choiceTwo?.id || card.matched}\n            />\n          ))}\n        </Styles.GameGrid>\n      </Styles.GameContainer>\n    </Styles.Game>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\nimport { normalize } from 'styled-normalize'\nimport Game from './components/Game'\n\nexport default function App() {\n  const GlobalStyles = createGlobalStyle\n  `\n    ${normalize}\n    * {\n      font-family: 'Poppins', sans-serif;\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n      width: 100%;\n    }\n  `\n\n  return (\n    <>\n      <GlobalStyles />\n      <Game />\n      <link\n        href='https://fonts.googleapis.com/css?family=Poppins&display=swap'\n        rel='stylesheet'\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}