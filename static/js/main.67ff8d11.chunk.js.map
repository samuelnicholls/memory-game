{"version":3,"sources":["base/colours.ts","components/Game/styles.ts","components/Button/styles.ts","components/Button/index.tsx","components/Card/styles.ts","components/Card/index.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["WHITE","Game","styled","div","GameContainer","GameWrapper","GameTitle","h1","GameGrid","GameTurns","p","Button","button","text","onClick","Card","CardFrontImage","img","props","isFlipped","CardBackImage","id","src","alt","handleChoice","disabled","cardObject","cardImages","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","useEffect","previousCards","map","card","matched","resetTurn","setTimeout","shuffleCards","shuffledCards","sort","Math","random","previousTurns","App","GlobalStyles","createGlobalStyle","normalize","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67ff8d11.chunk.js","sourcesContent":["export const BLACK = '#000000'\nexport const WHITE = '#FFFFFF'\nexport const PURPLE = '#1B1523'","import styled from 'styled-components'\nimport { PURPLE, WHITE } from '../../base/colours'\n\nexport const Game = styled.div`\n  background-color: ${PURPLE};\n  min-height: 100vh;\n`\n\nexport const GameContainer = styled.div`\n  max-width: 1024px;\n  height: 100%;\n  padding: 40px 0;\n  margin: 0 auto;\n  text-align: center;\n`\n\nexport const GameWrapper = styled.div`\n  padding: 0 40px;\n`\n\nexport const GameTitle = styled.h1`\n  color: ${WHITE};\n  font-size: 40px;\n  margin: 0 0 40px 0;\n`\n\nexport const GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 40px;\n  padding: 40px;\n  margin-top: 40px;\n`\n\nexport const GameTurns = styled.p`\n  font-size: 20px;\n  color: ${WHITE};\n`\n","import styled from 'styled-components'\nimport { WHITE, BLACK } from '../../base/colours'\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  background-color: transparent;\n  border: none;\n  border: 1px solid ${WHITE};\n  color: ${WHITE};\n  cursor: pointer;\n  transition: all 0.3s;\n\n  &:hover {\n    background-color: ${WHITE};\n    color: ${BLACK};\n  }\n`\n","import * as Styles from './styles'\n\nexport interface ButtonProps {\n  text: string\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nexport default function Button({ text, onClick }: ButtonProps) {\n  return (\n    <Styles.Button onClick={onClick}>\n      {text}\n    </Styles.Button>\n  )\n}\n","import styled from 'styled-components'\nimport { WHITE } from '../../base/colours'\n\nexport const Card = styled.div`\n  position: relative;\n  min-height: 200px;\n`\n\nexport const CardFrontImage = styled.img<{isFlipped: boolean | undefined}>`\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  transform: ${props => props.isFlipped ? 'rotateY(0deg)' : 'rotateY(90deg)'};\n  transition: all ease-in 0.2s;\n  transition-delay: ${props => props.isFlipped ? '0.2s' : '0s'};\n  border: 2px solid ${WHITE};\n  border-radius: 6px;\n`\n\nexport const CardBackImage = styled.img<{isFlipped: boolean | undefined}>`\n  display: block;\n  width: 100%;\n  border-radius: 6px;\n  transform: ${props => props.isFlipped ? 'rotateY(90deg)' : 'rotateY(0deg)'};\n  transition: all ease-in 0.2s;\n  transition-delay: ${props => props.isFlipped ? '0s' : '0.2s'};\n  border: 2px solid ${WHITE};\n  border-radius: 6px;\n`\n","import * as Styles from './styles'\n\nexport interface cardProps {\n  id: number\n  src: string\n  alt?: string\n  handleChoice?: (card: cardProps) => void\n  matched?: boolean\n  isFlipped?: boolean\n  disabled?: boolean\n}\n\nexport default function Card({ id, src, alt, handleChoice, isFlipped, disabled }: cardProps) {\n  const cardObject = { src, id }\n\n  const handleClick = () => {\n    if (disabled) return\n    if (handleChoice) {\n      handleChoice(cardObject)\n    }\n  }\n\n  return (\n    <Styles.Card>\n      <div>\n        <Styles.CardFrontImage \n          src={src} \n          alt={alt} \n          isFlipped={isFlipped} \n        />\n        <Styles.CardBackImage \n          src='img/cover.jpg' \n          alt='Cover image'\n          onClick={handleClick}\n          isFlipped={isFlipped} \n        />\n      </div>\n    </Styles.Card>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport * as Styles from './styles'\nimport Button from '../Button/index'\nimport Card, { cardProps } from '../Card/index'\n\nconst cardImages = [\n  { \"src\": \"img/london.jpg\", \"alt\": \"London\", \"matched\": false},\n  { \"src\": \"img/new-york.jpg\", \"alt\": \"New York\", \"matched\": false},\n  { \"src\": \"img/paris.jpg\", \"alt\": \"Paris\", \"matched\": false},\n  { \"src\": \"img/rome.jpg\", \"alt\": \"Rome\", \"matched\": false},\n  { \"src\": \"img/seoul.jpg\", \"alt\": \"Seoul\", \"matched\": false},\n  { \"src\": \"img/sydney.jpg\", \"alt\": \"Sydney\", \"matched\": false}\n]\n\nexport default function Game() { \n  const [cards, setCards] = useState<cardProps[]>([])\n  const [turns, setTurns] = useState<number>(0)\n  const [choiceOne, setChoiceOne] = useState<cardProps | null>(null)\n  const [choiceTwo, setChoiceTwo] = useState<cardProps | null>(null)\n  const [disabled, setDisabled] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true)\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(previousCards => {\n          return previousCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {...card, matched: true}\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  },[choiceOne, choiceTwo])\n\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n      setChoiceOne(null)\n      setChoiceTwo(null)\n      setCards(shuffledCards)\n      setTurns(0)\n  }\n\n  const handleChoice = (card: cardProps) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(previousTurns => previousTurns + 1)\n    setDisabled(false)\n  }\n\n  return (\n    <Styles.Game>\n      <Styles.GameContainer>\n        <Styles.GameWrapper>\n          <Styles.GameTitle>Memory Game</Styles.GameTitle>\n          <Button text='New Game' onClick={shuffleCards} />\n        </Styles.GameWrapper>\n        <Styles.GameGrid>\n          {cards.map(card => (\n            <Card \n              key={card.id} \n              id={card.id}\n              src={card.src} \n              alt={card.alt}\n              handleChoice={handleChoice}\n              isFlipped={card.id === choiceOne?.id || card.id === choiceTwo?.id || card.matched}\n              disabled={disabled}\n            />\n          ))}\n        </Styles.GameGrid>\n        <Styles.GameTurns>Turns: {turns}</Styles.GameTurns>\n      </Styles.GameContainer>\n    </Styles.Game>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\nimport { normalize } from 'styled-normalize'\nimport Game from './components/Game'\n\nexport default function App() {\n  const GlobalStyles = createGlobalStyle\n  `\n    ${normalize}\n    * {\n      font-family: 'Poppins', sans-serif;\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n      width: 100%;\n    }\n  `\n\n  return (\n    <>\n      <GlobalStyles />\n      <Game />\n      <link\n        href='https://fonts.googleapis.com/css?family=Poppins&display=swap'\n        rel='stylesheet'\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}